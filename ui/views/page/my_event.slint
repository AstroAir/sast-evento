import { Token } from "../../global.slint";
import { ScrollView } from "std-widgets.slint";
import { Page, Empty } from "../../components/index.slint";
import { STimeLine, STimeLineItem } from "../../modules/surrealism-ui/src/timeline/index.slint";
import { SCard } from "../../modules/surrealism-ui/src/card/index.slint";
import {SLink} from "../../modules/surrealism-ui/src/link/index.slint";
import { SDivider } from "../../modules/surrealism-ui/src/divider/index.slint";
import { SText } from "../../modules/surrealism-ui/src/text/index.slint";
import { Icon } from "../../modules/surrealism-ui/src/icon/icon.slint";
import {SButton} from "../../modules/surrealism-ui/src/button/index.slint";
import { SResult} from "../../modules/surrealism-ui/src/result/index.slint";
import { ViewManagerBridge, ViewName} from "../../logic/view_manager.slint";
import { ViewManager } from "../../logic/index.slint";
import { LineEdit, VerticalBox } from "std-widgets.slint";
import { EventCard, EventCardGroup} from "../../components/index.slint";
import { EventStruct, EventState } from "../../components/index.slint";

export global MyEventPageBridge {
    in-out property <[EventStruct]> info-sub;
    in-out property <[EventStruct]> info-start;
    in-out property <[EventStruct]> info-end;
    in-out property <string> event-code : "";
    in-out property <int> sub-event-num : 0;
    in-out property <int> start-event-num : 0;
    in-out property <int> id : 1;

    pure callback return-array-sub()->[int];
    pure callback return-array-start()->[int];

    callback get-code(string);
    callback get-event-id(int,string)->int;
    callback back-event-id(int)->int;
    callback is-check-in()->bool;

    callback show-mess(int,string,string)->string;
}

export component result-succes inherits Window {
    property <bool> is_show : false;
    visible: false;
    SResult {
        text: "签到成功";
        result-type: Success;
        btn-text: "点击返回";
        clicked => {parent.close()}
    }

    public function open() {
        self.is_show = true;
    }
    public function close() {
        self.is_show = false;
    }
}

export component result-fail inherits Window {
    property <bool> is_show : false;
    // 用于判断是不是确认了密码
    property <bool> is-confirm: false;
    visible: false;
    SResult {
        text: "抱歉,密码错误"+"\n"+"签到失败";
        result-type: Error;
        btn-text: "点击返回";
        clicked => {parent.close()}
    }

    public function open() {
        self.is_show = true;
    }
    public function close() {
        self.is_show = false;
    }
}

export component CodeGet inherits Window {
    width: 200px;
    height: 90px;
    property <bool> is_show : false;
    visible: is_show;
    LineEdit {
        width: 150px;
        height: 40px;
        placeholder-text: "Enter code here";
        font-size: 12px;
    }
    SButton{
        x: (parent.x)+40px;
        y: (parent.y)+65px;
        width: 30px;
        height: 20px;
        text: "";
        background: Token.color.surface;
        border-color: Token.color.primary-container;
        Text {
            text: "确认";
            font-size: 10px;
            color: Token.color.on-surface;
        }
        clicked => {parent.close()}
    }
    SButton{
        x: (parent.x)+75px;
        y: (parent.y)+65px;
        width: 30px;
        height: 20px;
        text: "";
        background: Token.color.surface;
        border-color: Token.color.primary-container;
        Text {
            text: "取消";
            font-size: 10px;
            color: Token.color.on-surface;
        }
        clicked => {parent.close()}
    }
    public function open() {
        self.is_show = true;
    }
    public function close() {
        self.is_show = false;
    }
}



//查看更多
export component ForMore inherits SLink {
    theme: Dark;
    text: "查看更多";
    clicked => {ViewManager.navigate-to(ViewName.HistoryPage)}
}

// 签到按钮
component SignButton inherits SButton{
    in-out property <int> s-id : 0;
    width: 40px;
    height: 20px;
    background: Token.color.surface;
    border-color: Token.color.outline;
    font-color: Token.color.on-surface;
    text: "签到";
    property <bool> active : true;
    clicked => {active = !active}
    states [
        active when  !active : {
            text : "取消";
        }
        inactive when active: {
            text : "签到";
        } 
    ]
}
// 评价按钮
component ReviewButton inherits SButton {
    width: 40px;
    height: 20px;
    property <string> txt : "评价";
    text: txt;
    background: Token.color.surface;
    border-color: Token.color.outline;
    font-color: Token.color.on-surface;
    clicked => {ViewManager.navigate-to(ViewName.DetailPage)}
}

component Card inherits SCard{
    in-out property <string> title : "标题";
    property <string> introduction : "介绍";
    property <string> content : "内容";
    background: Token.color.primary-container;
    Icon {
        x: parent.x+30px;
        height: 50px;
        width: 50px;
        source: Token.image.icon.evento;
    }
    info := Rectangle{
        x: parent.x+80px;
        preferred-height: 200px;
        preferred-width: 300px;
        VerticalLayout {
            alignment: center;
            SText {
                font-size: Token.font.headline.small.size;
                color: Token.color.outline;
                text: title;
            }
            SText{
                font-size: Token.font.label.small.size;
                color: Token.color.outline;
                text: introduction;
            }
            SText{
                font-size: Token.font.label.small.size;
                color: Token.color.outline;
                text: content;
            }
        }
    }
}
export component SignCard inherits Card{
    get := CodeGet{ 
        x: (parent.x)+80px;
    }
    SignButton {
        x: (parent.width)*0.75 + parent.x;
        clicked => {
            get.open();
        }
    }
}

export component ReviewCard inherits Card{
    ReviewButton {
        x: parent.x+300px;
    }
}

export component SignLine inherits STimeLine{
    STimeLineItem {
        width: (parent.width)+80px;
        height: parent.height;
        theme: Dark;
        SignCard {
            x: (parent.x)-10px;
            y: parent.y;
            height: (parent.height)-50px;
            width: 350px;
        }
    }
}
export component StartLine inherits STimeLine{
    STimeLineItem {
        width: (parent.width)+80px;
        height: parent.height;
        theme: Dark;
        Card {
            x: (parent.x)-10px;
            y: parent.y;
            height: (parent.height)-50px;
            width: 350px;
        }
    }
}
export component EndLine inherits STimeLine{
    STimeLineItem {
        width: (parent.width)+80px;
        height: parent.height;
        theme: Dark;
        ReviewCard {
            x: (parent.x)-10px;
            y: parent.y;
            height: (parent.height)-50px;
            width: 350px;
        }
    }
}
// a simple event form
component SignForm {
    Rectangle {
        preferred-height: 200px;
        preferred-width: 500px;
        mes := Rectangle{
            x: (parent.x)+5px;
            preferred-height: 200px;
            preferred-width: 50px;
            property <string> data : "日期";
            property <string> place : "地点";
            property <string> time : "时间";
            VerticalLayout {
                alignment: center;
                SText {
                    color: Token.color.outline;
                    text: data;
                }
                SText{
                    color: Token.color.outline;
                    text: place;
                }
                SText{
                    color: Token.color.outline;
                    text: time;
                }
            }
        }
        SignLine {
            x: mes.x + 80px;
            width: 20px;
            height: parent.height;
        }
    }
}

component StartForm {
    Rectangle {
        preferred-height: 200px;
        preferred-width: 500px;
        mes := Rectangle{
            x: (parent.x)+5px;
            preferred-height: 200px;
            preferred-width: 50px;
            property <string> data : "日期";
            property <string> place : "地点";
            property <string> time : "时间";
            VerticalLayout {
                alignment: center;
                SText {
                    color: Token.color.outline;
                    text: data;
                }
                SText{
                    color: Token.color.outline;
                    text: place;
                }
                SText{
                    color: Token.color.outline;
                    text: time;
                }
            }
        }
        StartLine {
            x: mes.x + 80px;
            width: 20px;
            height: parent.height;
        }
    }
}

component EndForm {
    Rectangle {
        preferred-height: 200px;
        preferred-width: 500px;
        mes := Rectangle{
            x: (parent.x)+5px;
            preferred-height: 200px;
            preferred-width: 50px;
            property <string> data : "日期";
            property <string> place : "地点";
            property <string> time : "时间";
            VerticalLayout {
                alignment: center;
                SText {
                    color: Token.color.outline;
                    text: data;
                }
                SText{
                    color: Token.color.outline;
                    text: place;
                }
                SText{
                    color: Token.color.outline;
                    text: time;
                }
            }
        }
        EndLine {
            x: mes.x + 80px;
            width: 20px;
            height: parent.height;
        }
    }
}

// a simple component for schedule
component Schedule {
    preferred-height: 800px;
    preferred-width: 600px;
    in-out property <string> title : "";
    VerticalLayout {
        spacing: 5px;
        //title
        SText {
            x: (parent.width)/2-(parent.x)-50px;
            color: Token.color.on-surface;
            font-size: Token.font.title.large.size;
            text: title;
        }
        //SDvider
        SDivider {
            //y: parent.y+40px;
            width: 500px;
            height: 2px;
            }
        //SText && STimeLine (separate)
        @children
    }
}

export component MyEventPage inherits Page {
    // TODO: implement MyEvent
    // optional
    // ScrollView {
        background := Empty { }

        layout := Empty{}

        body := Empty {
            x: 0;
            y: 0;
            width: 100%;
            height: 100%;
            //schedule timeline
            HorizontalLayout {
                signin-line := Schedule {
                    width: 50%;
                    height: 100%;
                    title: "已报名";
                    for idx in MyEventPageBridge.return-array-sub(): Rectangle {
                        SignForm {}
                    }
                }
                VerticalLayout {
                    spacing: 150px;
                    start-line := Schedule { 
                        width: 50%;
                        title: "进行中";
                        for idx in MyEventPageBridge.return-array-start(): Rectangle {
                            StartForm {}
                        }
                    }
                    end-line := Schedule { 
                        width: 50%;
                        title: "已结束";
                        ForMore { }
                        EndForm { }
                    }
                }
            }
            placeholder := Rectangle {
                border-width: 4px;
            }
        }
    //}
}